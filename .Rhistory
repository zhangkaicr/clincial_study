library(readxl)
options(stringsAsFactors = T)
options(stringsAsFactors = F)
#以下读入文件并进行预览
#以下设定工作目录
setwd("D:/pipeline")
rawdata <- read_excel("3.xlsx",col_names=T,na = "na")
glimpse(rawdata)#注意变量类型
str(rawdata)
str(rawdata)
glimpse(rawdata)#注意变量类型
##以下将需部分变量变为分类变量
vars <- c("ASA ")
rawdata<- rawdata %>%
mutate(across(one_of(vars), as.factor))
str(rawdata)
##查看没有缺失值的行的总体数据集
completa_data<- (rawdata[complete.cases(rawdata),])
###以下绘制缺失数据热图
vis_miss(rawdata,
show_perc = TRUE,
show_perc_col = TRUE,
cluster = TRUE)
###以下绘制缺失数据upset图，绘制前10个最多缺失的列
gg_miss_upset(rawdata,nsets = 15)
na.per<- (dim(rawdata)[1]/1000)###定义每列删除缺失的阈值
###定义删除缺失值函数为naf
naf<-function(x){
nas<-sum(is.na(x))
return(nas)
}
###以下按照缺失值阈值进行筛选
na_names<- apply(rawdata,2, naf)%>%
as.data.frame
newdata<- rawdata[,(na_names[,1]<= na.per)]
colnames(rawdata[,(na_names[,1]>na.per)])
save(newdata, file = "newdata.RData")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = F)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
explore_data <-newdata
#以下读入文件并进行预览
setwd("D:/pipeline")
data_final <-newdata
str(data_final)
#清空环境变量
rm(list = ls())
options(stringsAsFactors = F)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
library(tidyverse)
data_final
summarise(data_final)
summarise(data_final)
data_final
dput(names(data_final))
allvar<- dput(names(data_final))
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar
allvar <- allvar[1:19]
allvar <- allvar[1:19];allvar
allvar <- allvar[1:18];allvar
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
#以下进行单因素分析
dependent <- "Complication.Criteria"
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
str(data_final)
#以下进行结果变量定义
data_final <- mutate(data_final,grup = case_when(
Complication.Criteria == 1 ~ "mild",
Complication.Criteria == 0 ~"severe"  ))
str(data_final)
#以下进行结果变量定义
data_final <- mutate(data_final,Complication.Criteria = case_when(
Complication.Criteria == 1 ~ "mild",
Complication.Criteria == 0 ~"severe"  ))
str(data_final)
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
#以下进行结果变量定义
data_final <- mutate(data_final,Complication.Criteria = case_when(
Complication.Criteria =="mild"~ 1 ,
Complication.Criteria == "severe"~ 0 ))
str(data_final)
#以下进行单因素分析
dependent <- "Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
table(data_final$Complication.Criteria)
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
#清空环境变量
rm(list = ls())
options(stringsAsFactors = F)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
library(tidyverse)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
library(tidyverse)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
options(stringsAsFactors = T)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
data_final$Complication.Criteria <- as.factor(data_final$Complication.Criteria)
str(data_final)
#以下进行单因素分析
dependent <- "Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
dependent
#以下进行单因素分析
dependent <-"Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
str(data_final)
##载入需要的R包
rm(list = ls())
options(stringsAsFactors = T)
library(tidyverse)
library(naniar)
library(UpSetR)
library(readxl)
#以下读入文件并进行预览
#以下设定工作目录
setwd("D:/pipeline")
rawdata <- read_excel("3.xlsx",col_names=T,na = "na")
glimpse(rawdata)#注意变量类型
str(rawdata)
##输出变量名称及转换为因子变量类型
names(rawdata)#显示所有变量名称
##以下将需部分变量变为分类变量
vars <- c("ASA ")
rawdata<- rawdata %>%
mutate(across(one_of(vars), as.factor))
str(rawdata)
##查看没有缺失值的行的总体数据集
completa_data<- (rawdata[complete.cases(rawdata),])
###以下绘制缺失数据热图
vis_miss(rawdata,
show_perc = TRUE,
show_perc_col = TRUE,
cluster = TRUE)
###以下绘制缺失数据upset图，绘制前10个最多缺失的列
gg_miss_upset(rawdata,nsets = 15)
na.per<- (dim(rawdata)[1]/1000)###定义每列删除缺失的阈值
###定义删除缺失值函数为naf
naf<-function(x){
nas<-sum(is.na(x))
return(nas)
}
###以下按照缺失值阈值进行筛选
na_names<- apply(rawdata,2, naf)%>%
as.data.frame
newdata<- rawdata[,(na_names[,1]<= na.per)]
colnames(rawdata[,(na_names[,1]>na.per)])
save(newdata, file = "newdata.RData")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
library(tidyverse)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
#以下进行结果变量定义
data_final <- mutate(data_final,Complication.Criteria = case_when(
Complication.Criteria =="mild"~ 1 ,
Complication.Criteria == "severe"~ 0 ))
str(data_final)
data_final$Complication.Criteria <- as.factor(data_final$Complication.Criteria)
#以下进行单因素分析
dependent <-"Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
##载入需要的R包
rm(list = ls())
options(stringsAsFactors = T)
library(tidyverse)
library(naniar)
library(UpSetR)
library(readxl)
#以下读入文件并进行预览
#以下设定工作目录
setwd("D:/pipeline")
rawdata <- read_excel("3.xlsx",col_names=T,na = "na")
glimpse(rawdata)#注意变量类型
str(rawdata)
##输出变量名称及转换为因子变量类型
names(rawdata)#显示所有变量名称
##以下将需部分变量变为分类变量
vars <- c("ASA ")
rawdata<- rawdata %>%
mutate(across(one_of(vars), as.factor))
str(rawdata)
##查看没有缺失值的行的总体数据集
completa_data<- (rawdata[complete.cases(rawdata),])
###以下绘制缺失数据热图
vis_miss(rawdata,
show_perc = TRUE,
show_perc_col = TRUE,
cluster = TRUE)
###以下绘制缺失数据upset图，绘制前10个最多缺失的列
gg_miss_upset(rawdata,nsets = 15)
na.per<- (dim(rawdata)[1]/1000)###定义每列删除缺失的阈值
###定义删除缺失值函数为naf
naf<-function(x){
nas<-sum(is.na(x))
return(nas)
}
###以下按照缺失值阈值进行筛选
na_names<- apply(rawdata,2, naf)%>%
as.data.frame
str(rawdata)
options(stringsAsFactors = T)
rawdata <- read_excel("3.xlsx",col_names=T,na = "na")
glimpse(rawdata)#注意变量类型
str(rawdata)
##输出变量名称及转换为因子变量类型
names(rawdata)#显示所有变量名称
##以下将需部分变量变为分类变量
vars <- c("ASA ")
rawdata<- rawdata %>%
mutate(across(one_of(vars), as.factor))
str(rawdata)
##查看没有缺失值的行的总体数据集
completa_data<- (rawdata[complete.cases(rawdata),])
###以下绘制缺失数据热图
vis_miss(rawdata,
show_perc = TRUE,
show_perc_col = TRUE,
cluster = TRUE)
###以下绘制缺失数据upset图，绘制前10个最多缺失的列
gg_miss_upset(rawdata,nsets = 15)
na.per<- (dim(rawdata)[1]/1000)###定义每列删除缺失的阈值
###定义删除缺失值函数为naf
naf<-function(x){
nas<-sum(is.na(x))
return(nas)
}
###以下按照缺失值阈值进行筛选
na_names<- apply(rawdata,2, naf)%>%
as.data.frame
newdata<- rawdata[,(na_names[,1]<= na.per)]
colnames(rawdata[,(na_names[,1]>na.per)])
save(newdata, file = "newdata.RData")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
library(tidyverse)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
#以下进行结果变量定义
data_final <- mutate(data_final,Complication.Criteria = case_when(
Complication.Criteria =="mild"~ 1 ,
Complication.Criteria == "severe"~ 0 ))
str(data_final)
data_final$Complication.Criteria <- as.factor(data_final$Complication.Criteria)
#以下进行单因素分析
dependent <-"Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
write.csv(t2,"t2.csv")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
library(tidyverse)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
#以下进行结果变量定义
data_final <- mutate(data_final,Complication.Criteria = case_when(
Complication.Criteria =="mild"~ 0 ,
Complication.Criteria == "severe"~ 1 ))
#以下进行单因素分析
dependent <-"Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
write.csv(t2,"Univariate_analysis.csv")
#以下进行结果变量定义
data_final$Complication.Criteria <- as.factor(data_final$Complication.Criteria)
str(data_final)
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
#以下进行结果变量定义
data_final$Complication.Criteria <- as.factor(data_final$Complication.Criteria)
str(data_final)
#以下进行单因素分析
dependent <-"Complication.Criteria"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
write.csv(t2,"Univariate_analysis.csv")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
#以下进行结果变量定义
data_final$Pancreatic.leakage<- as.factor(data_final$Pancreatic.leakage)
str(data_final)#注意结果变量分布
#以下进行单因素分析
dependent <-"Pancreatic.leakage"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
write.csv(t2,"Univariate_analysis.csv")
##载入需要的R包
rm(list = ls())
options(stringsAsFactors = T)
library(tidyverse)
library(naniar)
library(UpSetR)
library(readxl)
#以下读入文件并进行预览
#以下设定工作目录
setwd("D:/pipeline")
rawdata <- read_excel("4.xlsx",col_names=T,na = "na")
glimpse(rawdata)#注意变量类型
str(rawdata)
##输出变量名称及转换为因子变量类型
names(rawdata)#显示所有变量名称
##以下将需部分变量变为分类变量
vars <- c("ASA ")
rawdata<- rawdata %>%
mutate(across(one_of(vars), as.factor))
str(rawdata)
##查看没有缺失值的行的总体数据集
completa_data<- (rawdata[complete.cases(rawdata),])
###以下绘制缺失数据热图
vis_miss(rawdata,
show_perc = TRUE,
show_perc_col = TRUE,
cluster = TRUE)
###以下绘制缺失数据upset图，绘制前10个最多缺失的列
gg_miss_upset(rawdata,nsets = 15)
na.per<- (dim(rawdata)[1]/1000)###定义每列删除缺失的阈值
###定义删除缺失值函数为naf
naf<-function(x){
nas<-sum(is.na(x))
return(nas)
}
###以下按照缺失值阈值进行筛选
na_names<- apply(rawdata,2, naf)%>%
as.data.frame
newdata<- rawdata[,(na_names[,1]<= na.per)]
colnames(rawdata[,(na_names[,1]>na.per)])
save(newdata, file = "newdata.RData")
save(newdata, file = "newdata.RData")
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
##载入需要的R包
library(compareGroups)
library(rms)
library(ggpubr)
library(finalfit)
library(gtsummary)
library(tidyverse)
#清空环境变量
rm(list = ls())
options(stringsAsFactors = T)
#以下读入文件并进行预览
setwd("D:/pipeline")
load("newdata.RData")
data_final <-newdata
str(data_final)
#以下将所有列名纳入一个向量并选择自变量
allvar<- dput(names(data_final));allvar
allvar <- allvar[1:18];allvar
str(data_final)#注意结果变量分布
#以下进行单因素分析
dependent <-"Pancreatic.leakage"
explanatory <- allvar
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
write.csv(t2,"Univariate_analysis.csv")
data_final  %>%
finalfit(dependent,explanatory,
metrics=T,  #metrics=T表示输出模型检验的指标
add_dependent_label=F) -> t2  #add_dependent_label=F表示不在表的左上角添加因变量标签。
